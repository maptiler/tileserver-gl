name: 'Continuous Testing'

on:
  workflow_call:

permissions:
  checks: write
  contents: read

env:
  LOCAL_BASE_IMAGE_NAME: local-build-base
  LOCAL_MANIFEST_NAME: test-tileserver-gl-manifest

jobs:
  # Job 1: Build individual architecture images locally
  build_arch_images_local:
    name: Build and Tag ${{ matrix.runs-on }} Locally
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-22.04
            arch: amd64
          - runs-on: ubuntu-22.04-arm
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get OS Architecture
        run: uname -m

      - name: Install dependencies (Ubuntu) ðŸš€
        run: >-
          sudo apt-get install -qq libcairo2-dev libjpeg8-dev libpango1.0-dev
          libgif-dev build-essential g++ xvfb libgles2-mesa-dev libgbm-dev
          libxxf86vm-dev
      - name: Setup node env ðŸ“¦
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          check-latest: true
          cache: 'npm'

      - name: Install dependencies ðŸš€
        run: npm ci --prefer-offline --no-audit

      - name: Test Publish
        run: npm publish --dry-run

      - name: Pull test data ðŸ“¦
        run: >-
          wget -O test_data.zip
          https://github.com/maptiler/tileserver-gl/releases/download/v1.3.0/test_data.zip

      - name: Prepare test data ðŸ“¦
        run: unzip -q test_data.zip -d test_data

      - name: Run tests ðŸ§ª
        run: xvfb-run --server-args="-screen 0 1024x768x24" npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and tag ${{ matrix.arch }} image locally
        id: build_local_arch # Give it a unique ID for this job
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          tags: ${{ env.LOCAL_BASE_IMAGE_NAME }}:${{ matrix.arch }}
          outputs: type=image,push=false,name-canonical=true

      - name: Print Local Image Info for ${{ matrix.arch }}
        run: |
          echo "Built and tagged image locally for ${{ matrix.arch }} as ${{ env.LOCAL_BASE_IMAGE_NAME }}:${{ matrix.arch }}"
          echo "Digest for ${{ matrix.arch }}: ${{ steps.build_local_arch.outputs.digest }}"
