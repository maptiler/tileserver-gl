name: 'Continuous Testing'

on:
  workflow_call:

permissions:
  checks: write
  contents: read

env:
  LOCAL_BASE_IMAGE_NAME: local-build-base
  LOCAL_MANIFEST_NAME: test-tileserver-gl-manifest

jobs:
  # Job 1: Build individual architecture images locally
  build_arch_images_local:
    name: Build and Tag ${{ matrix.runs-on }} Locally
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-22.04
            arch: amd64
          - runs-on: ubuntu-22.04-arm
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get OS Architecture
        run: uname -m

      - name: Install dependencies (Ubuntu) ðŸš€
        run: >-
          sudo apt-get install -qq libcairo2-dev libjpeg8-dev libpango1.0-dev
          libgif-dev build-essential g++ xvfb libgles2-mesa-dev libgbm-dev
          libxxf86vm-dev
      - name: Setup node env ðŸ“¦
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          check-latest: true
          cache: 'npm'

      - name: Install dependencies ðŸš€
        run: npm ci --prefer-offline --no-audit

      - name: Test Publish
        run: npm publish --dry-run

      - name: Pull test data ðŸ“¦
        run: >-
          wget -O test_data.zip
          https://github.com/maptiler/tileserver-gl/releases/download/v1.3.0/test_data.zip

      - name: Prepare test data ðŸ“¦
        run: unzip -q test_data.zip -d test_data

      - name: Run tests ðŸ§ª
        run: xvfb-run --server-args="-screen 0 1024x768x24" npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and tag ${{ matrix.arch }} image locally
        id: build_local_arch # Give it a unique ID for this job
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          tags: ${{ env.LOCAL_BASE_IMAGE_NAME }}:${{ matrix.arch }}
          outputs: type=image,push=false,name-canonical=true

      - name: Print Local Image Info for ${{ matrix.arch }}
        run: |
          echo "Built and tagged image locally for ${{ matrix.arch }} as ${{ env.LOCAL_BASE_IMAGE_NAME }}:${{ matrix.arch }}"
          # Optionally, capture the digest if you want to use it for manifest creation later
          echo "Digest for ${{ matrix.arch }}: ${{ steps.build_local_arch.outputs.digest }}"

      # You could also use actions/upload-artifact here to pass local image info
      # (like digests or tags) to the next job if needed, but for manifest creation
      # referencing by local tag is often sufficient and simpler.

  # Job 2: Create and inspect the manifest list locally using the built images
  test_manifest_creation:
    name: Test Local Manifest Creation
    runs-on: ubuntu-latest # This job can run on any OS that supports Docker commands
    needs: build_arch_images_local # This job depends on the previous one completing for all its matrix items

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # Ensure local images are accessible. Since they are built on the GitHub Actions
      # runners, they should be available in the Docker daemon's image cache
      # for the duration of the workflow run.

      - name: Create multi-arch manifest list locally
        run: |
          echo "Creating local manifest list: ${{ env.LOCAL_MANIFEST_NAME }}"
          echo "Using local images: ${{ env.LOCAL_BASE_IMAGE_NAME }}:amd64 and ${{ env.LOCAL_BASE_IMAGE_NAME }}:arm64"

          # List local images to confirm they are present
          echo "Listing local images..."
          docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ env.LOCAL_BASE_IMAGE_NAME }}"

          # Use buildx imagetools to create the manifest list from local images
          # The references should be the tags we applied in the previous job.
          docker buildx imagetools create \
            --tag "${{ env.LOCAL_MANIFEST_NAME }}:latest" \
            --tag "${{ env.LOCAL_MANIFEST_NAME }}:test-amd64-ref" \
            --tag "${{ env.LOCAL_MANIFEST_NAME }}:test-arm64-ref" \
            "${{ env.LOCAL_BASE_IMAGE_NAME }}:amd64" \
            "${{ env.LOCAL_BASE_IMAGE_NAME }}:arm64"

      - name: Inspect the locally created manifest list
        run: |
          echo "Inspecting local manifest list: ${{ env.LOCAL_MANIFEST_NAME }}:latest"
          docker buildx imagetools inspect "${{ env.LOCAL_MANIFEST_NAME }}:latest"